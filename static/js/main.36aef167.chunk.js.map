{"version":3,"sources":["components/Nav.js","components/Shop.js","components/About.js","components/ItemDetails.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","react_default","a","createElement","className","react_router_dom","style","to","Shop","useEffect","fetchItems","_useState","useState","_useState2","Object","slicedToArray","items","setItems","_ref","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","console","log","stop","apply","this","arguments","map","item","key","itemid","concat","name","About","ItemDetails","match","fetchItem","images","setItem","_ref2","params","id","src","transparent","alt","Home","App","components_Nav","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36aef167.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\n\nfunction Nav() {\n    const navStyle = {\n        color:'white'\n    }\n  return (\n    <nav>\n        <h3>Logo</h3>\n        <ul className=\"nav-links\">\n            <Link style={navStyle} to='/about'><li>About</li></Link>\n            <Link style={navStyle} to='/shop'><li>Shop</li></Link>\n        </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState, useEffect }from \"react\";\nimport { Link } from 'react-router-dom';\n\n\nfunction Shop() {\n\n    useEffect(() => {\n        fetchItems();\n    },[]);\n\n    const [items, setItems] =useState([]);  // state\n\n    const fetchItems = async () => {\n        const data = await fetch('https://fortnite-public-api.theapinetwork.com/prod09/upcoming/get');\n        \n        const items = await data.json()\n        console.log(items.items);\n        setItems(items.items)  // setState\n    }\n  return (\n    <div>\n      {items.map(item => (\n          <div key={item.itemid}>\n          <h1>\n          <Link to={`/shop/${item.itemid}`}>{item.name}</Link>\n          </h1>\n          </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Shop;\n","import React from 'react';\n\nfunction About() {\n  return (\n    <div>\n      <h1>About Page</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState, useEffect }from \"react\";\n\n\nfunction ItemDetails({match}) { // match pour acceder aux props\n    useEffect(() => {\n        fetchItem();\n        console.log(match)\n    },[]);\n\n    const [item, setItem] =useState({ images: {} });  // state\n      \n    const fetchItem = async () => {\n      const fetchItem = await fetch(`https://fortnite-public-api.theapinetwork.com/prod09/item/get?ids=${match.params.id}`);\n      const item = await fetchItem.json();\n      setItem(item)\n      console.log(item);\n    }\n  return (\n          <div key={item.itemid}>\n          <h1>{item.name}</h1>\n          <img src={item.images.transparent} alt=\"\" />\n          </div>\n  );\n}\n\nexport default ItemDetails;\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Shop from \"./components/Shop\";\nimport About from \"./components/About\";\nimport ItemDetails from './components/ItemDetails'\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/shop\" exact component={Shop} />\n        <Route path=\"/shop/:id\" component={ItemDetails} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <div>\n    <h1>Home Page</h1>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}